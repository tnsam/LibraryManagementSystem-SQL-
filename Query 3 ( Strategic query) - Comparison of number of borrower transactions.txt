CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
CLEAR BUFFER
TTITLE OFF
CLEAR SCREEN

SET LINESIZE 120
SET PAGESIZE 100

ACCEPT INPUT_YEAR DATE FORMAT 'YYYY' PROMPT 'Enter year >'
ACCEPT TRANS_STATUS CHAR PROMPT 'Enter borrower transaction status >'

TTITLE LEFT ' =====================================================================================================' SKIP 1 -
LEFT ' Comparison of number of transactions between borrower type with '&TRANS_STATUS' transaction status in Year '&INPUT_YEAR'' SKIP 1 -
LEFT ' =====================================================================================================' SKIP 1-
LEFT 'Page: ' FORMAT 999 SQL.PNO SKIP 1
REPFOOTER SKIP 1 LEFT '                                              ---- END ----' SKIP 1
    
COLUMN "BORROWER TYPE1" FORMAT A15
COLUMN "BORROWER TYPE2" FORMAT A15
COLUMN MONTH FORMAT A15
COMPUTE SUM LABEL 'TOTAL' OF "LECTURER TOTAL TRANS" ON REPORT
COMPUTE SUM LABEL 'TOTAL' OF "STUDENT TOTAL TRANS" ON REPORT
BREAK ON "BORROWER TYPE1" ON "BORROWER TYPE2" ON REPORT


--CREATE TEMPORARY CALENDAR
DROP TABLE TEMPCALENDAR PURGE;
CREATE GLOBAL TEMPORARY TABLE TEMPCALENDAR 
(calMonth_numYear     number(2),  -- 01 to 12
 calMonth_name        varchar(9) -- JANUARY to DECEMBER
)
ON COMMIT PRESERVE ROWS;

INSERT INTO TEMPCALENDAR VALUES ( 1, 'JANUARY');
INSERT INTO TEMPCALENDAR VALUES ( 2, 'FEBRUARY');
INSERT INTO TEMPCALENDAR VALUES ( 3, 'MARCH');
INSERT INTO TEMPCALENDAR VALUES ( 4, 'APRIL');
INSERT INTO TEMPCALENDAR VALUES ( 5, 'MAY');
INSERT INTO TEMPCALENDAR VALUES ( 6, 'JUNE');
INSERT INTO TEMPCALENDAR VALUES ( 7, 'JULY');
INSERT INTO TEMPCALENDAR VALUES ( 8, 'AUGUST');
INSERT INTO TEMPCALENDAR VALUES ( 9, 'SEPTEMBER');
INSERT INTO TEMPCALENDAR VALUES ( 10, 'OCTOBER');
INSERT INTO TEMPCALENDAR VALUES ( 11, 'NOVEMBER');
INSERT INTO TEMPCALENDAR VALUES ( 12, 'DECEMBER');

--CHECK NUMBER OF TRANSACTION FOR LECTURER BORROWER TYPE 
CREATE OR REPLACE VIEW LECTURER_TRANS AS
SELECT TO_CHAR(BT.actualReturnDate, 'MONTH') AS "MONTH NAME", 
       EXTRACT(MONTH FROM BT.actualReturnDate) AS "MONTH TRANS", BT.bTransID AS "Transaction ID"
FROM BORROWER_TRANS BT, BORROWER B, BORROWER_TYPE BTYPE
WHERE BT.borrowerID = B.borrowerID AND
      B.borrowerTypeID = BTYPE.borrowerTypeID AND
      BT.borrowerTransStatusID = UPPER('&TRANS_STATUS') AND
      BTYPE.borrowerTypeDesc = 'Lecturer' AND
      EXTRACT(YEAR FROM BT.actualReturnDate) = &INPUT_YEAR
GROUP BY TO_CHAR(BT.actualReturnDate, 'MONTH'), EXTRACT(MONTH FROM BT.actualReturnDate), BT.bTransID
ORDER BY EXTRACT(MONTH FROM BT.actualReturnDate);


CREATE OR REPLACE VIEW LECTURER_MONTHLY_TRANS AS
SELECT 'LECTURER' AS "BORROWER TYPE1", A.*
FROM (SELECT T.calMonth_name AS "MONTH", COUNT(LT."Transaction ID") AS "TOTAL TRANSACTION"
      FROM TEMPCALENDAR T
      LEFT JOIN LECTURER_TRANS LT
      ON LT."MONTH TRANS" = T.calMonth_numYear
      GROUP BY T.calMonth_name, T.calMonth_numYear
      ORDER BY T.calMonth_numYear) A; 


--CHECK NUMBER OF TRANSACTION FOR STUDENT BORROWER TYPE 
CREATE OR REPLACE VIEW STUDENT_TRANS AS
SELECT TO_CHAR(BT.actualReturnDate, 'MONTH') AS "MONTH NAME", 
       EXTRACT(MONTH FROM BT.actualReturnDate) AS "MONTH TRANS", BT.bTransID AS "Transaction ID"
FROM BORROWER_TRANS BT, BORROWER B, BORROWER_TYPE BTYPE
WHERE BT.borrowerID = B.borrowerID AND
      B.borrowerTypeID = BTYPE.borrowerTypeID AND
      BT.borrowerTransStatusID = UPPER('&TRANS_STATUS') AND
      BTYPE.borrowerTypeDesc = 'Student' AND
      EXTRACT(YEAR FROM BT.actualReturnDate) = &INPUT_YEAR
GROUP BY TO_CHAR(BT.actualReturnDate, 'MONTH'), EXTRACT(MONTH FROM BT.actualReturnDate), BT.bTransID
ORDER BY EXTRACT(MONTH FROM BT.actualReturnDate);


CREATE OR REPLACE VIEW STUDENT_MONTHLY_TRANS AS
SELECT 'STUDENT' AS "BORROWER TYPE2", A.*
FROM (SELECT T.calMonth_name AS MONTH, COUNT(ST."Transaction ID") AS "TOTAL TRANSACTION"
      FROM TEMPCALENDAR T
      LEFT JOIN STUDENT_TRANS ST
      ON ST."MONTH TRANS" = T.calMonth_numYear
      GROUP BY T.calMonth_name, T.calMonth_numYear
      ORDER BY T.calMonth_numYear) A;


SELECT A.*, B.*
FROM LECTURER_MONTHLY_TRANS A
JOIN STUDENT_MONTHLY_TRANS B
ON A.MONTH = B.MONTH;